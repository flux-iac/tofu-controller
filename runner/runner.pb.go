// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v6.31.1
// source: runner/runner.proto

package runner

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LookPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *LookPathRequest) Reset() {
	*x = LookPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookPathRequest) ProtoMessage() {}

func (x *LookPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookPathRequest.ProtoReflect.Descriptor instead.
func (*LookPathRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{0}
}

func (x *LookPathRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type LookPathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecPath string `protobuf:"bytes,1,opt,name=execPath,proto3" json:"execPath,omitempty"`
}

func (x *LookPathReply) Reset() {
	*x = LookPathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookPathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookPathReply) ProtoMessage() {}

func (x *LookPathReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookPathReply.ProtoReflect.Descriptor instead.
func (*LookPathReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{1}
}

func (x *LookPathReply) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

type NewTerraformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkingDir string `protobuf:"bytes,1,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	ExecPath   string `protobuf:"bytes,2,opt,name=execPath,proto3" json:"execPath,omitempty"`
	Terraform  []byte `protobuf:"bytes,3,opt,name=terraform,proto3" json:"terraform,omitempty"`
	InstanceID string `protobuf:"bytes,4,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
}

func (x *NewTerraformRequest) Reset() {
	*x = NewTerraformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTerraformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTerraformRequest) ProtoMessage() {}

func (x *NewTerraformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTerraformRequest.ProtoReflect.Descriptor instead.
func (*NewTerraformRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{2}
}

func (x *NewTerraformRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *NewTerraformRequest) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *NewTerraformRequest) GetTerraform() []byte {
	if x != nil {
		return x.Terraform
	}
	return nil
}

func (x *NewTerraformRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

type NewTerraformReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewTerraformReply) Reset() {
	*x = NewTerraformReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTerraformReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTerraformReply) ProtoMessage() {}

func (x *NewTerraformReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTerraformReply.ProtoReflect.Descriptor instead.
func (*NewTerraformReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{3}
}

func (x *NewTerraformReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string            `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	Envs       map[string]string `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetEnvRequest) Reset() {
	*x = SetEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEnvRequest) ProtoMessage() {}

func (x *SetEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEnvRequest.ProtoReflect.Descriptor instead.
func (*SetEnvRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{4}
}

func (x *SetEnvRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *SetEnvRequest) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

type SetEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetEnvReply) Reset() {
	*x = SetEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEnvReply) ProtoMessage() {}

func (x *SetEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEnvReply.ProtoReflect.Descriptor instead.
func (*SetEnvReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{5}
}

func (x *SetEnvReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FileMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileMapping) Reset() {
	*x = FileMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMapping) ProtoMessage() {}

func (x *FileMapping) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMapping.ProtoReflect.Descriptor instead.
func (*FileMapping) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{6}
}

func (x *FileMapping) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *FileMapping) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *FileMapping) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CreateFileMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkingDir   string         `protobuf:"bytes,1,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	FileMappings []*FileMapping `protobuf:"bytes,2,rep,name=fileMappings,proto3" json:"fileMappings,omitempty"`
}

func (x *CreateFileMappingsRequest) Reset() {
	*x = CreateFileMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileMappingsRequest) ProtoMessage() {}

func (x *CreateFileMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileMappingsRequest.ProtoReflect.Descriptor instead.
func (*CreateFileMappingsRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFileMappingsRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *CreateFileMappingsRequest) GetFileMappings() []*FileMapping {
	if x != nil {
		return x.FileMappings
	}
	return nil
}

type CreateFileMappingsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateFileMappingsReply) Reset() {
	*x = CreateFileMappingsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileMappingsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileMappingsReply) ProtoMessage() {}

func (x *CreateFileMappingsReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileMappingsReply.ProtoReflect.Descriptor instead.
func (*CreateFileMappingsReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{8}
}

func (x *CreateFileMappingsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UploadAndExtractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TarGz     []byte `protobuf:"bytes,3,opt,name=tarGz,proto3" json:"tarGz,omitempty"`
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UploadAndExtractRequest) Reset() {
	*x = UploadAndExtractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAndExtractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAndExtractRequest) ProtoMessage() {}

func (x *UploadAndExtractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAndExtractRequest.ProtoReflect.Descriptor instead.
func (*UploadAndExtractRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{9}
}

func (x *UploadAndExtractRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UploadAndExtractRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadAndExtractRequest) GetTarGz() []byte {
	if x != nil {
		return x.TarGz
	}
	return nil
}

func (x *UploadAndExtractRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type UploadAndExtractReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkingDir string `protobuf:"bytes,1,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	TmpDir     string `protobuf:"bytes,2,opt,name=tmpDir,proto3" json:"tmpDir,omitempty"`
}

func (x *UploadAndExtractReply) Reset() {
	*x = UploadAndExtractReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAndExtractReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAndExtractReply) ProtoMessage() {}

func (x *UploadAndExtractReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAndExtractReply.ProtoReflect.Descriptor instead.
func (*UploadAndExtractReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{10}
}

func (x *UploadAndExtractReply) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *UploadAndExtractReply) GetTmpDir() string {
	if x != nil {
		return x.TmpDir
	}
	return ""
}

type CleanupDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TmpDir string `protobuf:"bytes,1,opt,name=tmpDir,proto3" json:"tmpDir,omitempty"`
}

func (x *CleanupDirRequest) Reset() {
	*x = CleanupDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupDirRequest) ProtoMessage() {}

func (x *CleanupDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupDirRequest.ProtoReflect.Descriptor instead.
func (*CleanupDirRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{11}
}

func (x *CleanupDirRequest) GetTmpDir() string {
	if x != nil {
		return x.TmpDir
	}
	return ""
}

type CleanupDirReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CleanupDirReply) Reset() {
	*x = CleanupDirReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupDirReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupDirReply) ProtoMessage() {}

func (x *CleanupDirReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupDirReply.ProtoReflect.Descriptor instead.
func (*CleanupDirReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{12}
}

func (x *CleanupDirReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WriteBackendConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirPath       string `protobuf:"bytes,1,opt,name=dirPath,proto3" json:"dirPath,omitempty"`
	BackendConfig []byte `protobuf:"bytes,2,opt,name=backendConfig,proto3" json:"backendConfig,omitempty"`
}

func (x *WriteBackendConfigRequest) Reset() {
	*x = WriteBackendConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteBackendConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBackendConfigRequest) ProtoMessage() {}

func (x *WriteBackendConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBackendConfigRequest.ProtoReflect.Descriptor instead.
func (*WriteBackendConfigRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{13}
}

func (x *WriteBackendConfigRequest) GetDirPath() string {
	if x != nil {
		return x.DirPath
	}
	return ""
}

func (x *WriteBackendConfigRequest) GetBackendConfig() []byte {
	if x != nil {
		return x.BackendConfig
	}
	return nil
}

type WriteBackendConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WriteBackendConfigReply) Reset() {
	*x = WriteBackendConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteBackendConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBackendConfigReply) ProtoMessage() {}

func (x *WriteBackendConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBackendConfigReply.ProtoReflect.Descriptor instead.
func (*WriteBackendConfigReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{14}
}

func (x *WriteBackendConfigReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProcessCliConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirPath   string `protobuf:"bytes,1,opt,name=dirPath,proto3" json:"dirPath,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProcessCliConfigRequest) Reset() {
	*x = ProcessCliConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessCliConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessCliConfigRequest) ProtoMessage() {}

func (x *ProcessCliConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessCliConfigRequest.ProtoReflect.Descriptor instead.
func (*ProcessCliConfigRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessCliConfigRequest) GetDirPath() string {
	if x != nil {
		return x.DirPath
	}
	return ""
}

func (x *ProcessCliConfigRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ProcessCliConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProcessCliConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (x *ProcessCliConfigReply) Reset() {
	*x = ProcessCliConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessCliConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessCliConfigReply) ProtoMessage() {}

func (x *ProcessCliConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessCliConfigReply.ProtoReflect.Descriptor instead.
func (*ProcessCliConfigReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessCliConfigReply) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type GenerateVarsForTFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkingDir string `protobuf:"bytes,1,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
}

func (x *GenerateVarsForTFRequest) Reset() {
	*x = GenerateVarsForTFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateVarsForTFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVarsForTFRequest) ProtoMessage() {}

func (x *GenerateVarsForTFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVarsForTFRequest.ProtoReflect.Descriptor instead.
func (*GenerateVarsForTFRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{17}
}

func (x *GenerateVarsForTFRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type GenerateVarsForTFReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GenerateVarsForTFReply) Reset() {
	*x = GenerateVarsForTFReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateVarsForTFReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVarsForTFReply) ProtoMessage() {}

func (x *GenerateVarsForTFReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVarsForTFReply.ProtoReflect.Descriptor instead.
func (*GenerateVarsForTFReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{18}
}

func (x *GenerateVarsForTFReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GenerateTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkingDir string `protobuf:"bytes,1,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
}

func (x *GenerateTemplateRequest) Reset() {
	*x = GenerateTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTemplateRequest) ProtoMessage() {}

func (x *GenerateTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTemplateRequest.ProtoReflect.Descriptor instead.
func (*GenerateTemplateRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{19}
}

func (x *GenerateTemplateRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type GenerateTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GenerateTemplateReply) Reset() {
	*x = GenerateTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTemplateReply) ProtoMessage() {}

func (x *GenerateTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTemplateReply.ProtoReflect.Descriptor instead.
func (*GenerateTemplateReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{20}
}

func (x *GenerateTemplateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance       string   `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	Out              string   `protobuf:"bytes,2,opt,name=out,proto3" json:"out,omitempty"`
	Refresh          bool     `protobuf:"varint,3,opt,name=refresh,proto3" json:"refresh,omitempty"`
	Destroy          bool     `protobuf:"varint,4,opt,name=destroy,proto3" json:"destroy,omitempty"`
	Targets          []string `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty"`
	LockTimeout      string   `protobuf:"bytes,6,opt,name=lockTimeout,proto3" json:"lockTimeout,omitempty"`
	SourceRefRootDir string   `protobuf:"bytes,7,opt,name=sourceRefRootDir,proto3" json:"sourceRefRootDir,omitempty"`
}

func (x *PlanRequest) Reset() {
	*x = PlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRequest) ProtoMessage() {}

func (x *PlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRequest.ProtoReflect.Descriptor instead.
func (*PlanRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{21}
}

func (x *PlanRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *PlanRequest) GetOut() string {
	if x != nil {
		return x.Out
	}
	return ""
}

func (x *PlanRequest) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *PlanRequest) GetDestroy() bool {
	if x != nil {
		return x.Destroy
	}
	return false
}

func (x *PlanRequest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *PlanRequest) GetLockTimeout() string {
	if x != nil {
		return x.LockTimeout
	}
	return ""
}

func (x *PlanRequest) GetSourceRefRootDir() string {
	if x != nil {
		return x.SourceRefRootDir
	}
	return ""
}

type PlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drifted             bool   `protobuf:"varint,1,opt,name=drifted,proto3" json:"drifted,omitempty"`
	Message             string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	StateLockIdentifier string `protobuf:"bytes,3,opt,name=stateLockIdentifier,proto3" json:"stateLockIdentifier,omitempty"`
	PlanCreated         bool   `protobuf:"varint,4,opt,name=planCreated,proto3" json:"planCreated,omitempty"`
}

func (x *PlanReply) Reset() {
	*x = PlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanReply) ProtoMessage() {}

func (x *PlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanReply.ProtoReflect.Descriptor instead.
func (*PlanReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{22}
}

func (x *PlanReply) GetDrifted() bool {
	if x != nil {
		return x.Drifted
	}
	return false
}

func (x *PlanReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PlanReply) GetStateLockIdentifier() string {
	if x != nil {
		return x.StateLockIdentifier
	}
	return ""
}

func (x *PlanReply) GetPlanCreated() bool {
	if x != nil {
		return x.PlanCreated
	}
	return false
}

type ShowPlanFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	Filename   string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *ShowPlanFileRequest) Reset() {
	*x = ShowPlanFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPlanFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPlanFileRequest) ProtoMessage() {}

func (x *ShowPlanFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPlanFileRequest.ProtoReflect.Descriptor instead.
func (*ShowPlanFileRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{23}
}

func (x *ShowPlanFileRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *ShowPlanFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ShowPlanFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonOutput []byte `protobuf:"bytes,1,opt,name=jsonOutput,proto3" json:"jsonOutput,omitempty"`
}

func (x *ShowPlanFileReply) Reset() {
	*x = ShowPlanFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPlanFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPlanFileReply) ProtoMessage() {}

func (x *ShowPlanFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPlanFileReply.ProtoReflect.Descriptor instead.
func (*ShowPlanFileReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{24}
}

func (x *ShowPlanFileReply) GetJsonOutput() []byte {
	if x != nil {
		return x.JsonOutput
	}
	return nil
}

type ShowPlanFileRawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	Filename   string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *ShowPlanFileRawRequest) Reset() {
	*x = ShowPlanFileRawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPlanFileRawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPlanFileRawRequest) ProtoMessage() {}

func (x *ShowPlanFileRawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPlanFileRawRequest.ProtoReflect.Descriptor instead.
func (*ShowPlanFileRawRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{25}
}

func (x *ShowPlanFileRawRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *ShowPlanFileRawRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ShowPlanFileRawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawOutput string `protobuf:"bytes,1,opt,name=rawOutput,proto3" json:"rawOutput,omitempty"`
}

func (x *ShowPlanFileRawReply) Reset() {
	*x = ShowPlanFileRawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPlanFileRawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPlanFileRawReply) ProtoMessage() {}

func (x *ShowPlanFileRawReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPlanFileRawReply.ProtoReflect.Descriptor instead.
func (*ShowPlanFileRawReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{26}
}

func (x *ShowPlanFileRawReply) GetRawOutput() string {
	if x != nil {
		return x.RawOutput
	}
	return ""
}

type SaveTFPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance               string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	BackendCompletelyDisable bool   `protobuf:"varint,2,opt,name=backendCompletelyDisable,proto3" json:"backendCompletelyDisable,omitempty"`
	Name                     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Namespace                string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uuid                     string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Revision                 string `protobuf:"bytes,6,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *SaveTFPlanRequest) Reset() {
	*x = SaveTFPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTFPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTFPlanRequest) ProtoMessage() {}

func (x *SaveTFPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTFPlanRequest.ProtoReflect.Descriptor instead.
func (*SaveTFPlanRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{27}
}

func (x *SaveTFPlanRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *SaveTFPlanRequest) GetBackendCompletelyDisable() bool {
	if x != nil {
		return x.BackendCompletelyDisable
	}
	return false
}

func (x *SaveTFPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaveTFPlanRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SaveTFPlanRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SaveTFPlanRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type SaveTFPlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SaveTFPlanReply) Reset() {
	*x = SaveTFPlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTFPlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTFPlanReply) ProtoMessage() {}

func (x *SaveTFPlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTFPlanReply.ProtoReflect.Descriptor instead.
func (*SaveTFPlanReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{28}
}

func (x *SaveTFPlanReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LoadTFPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance               string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	BackendCompletelyDisable bool   `protobuf:"varint,2,opt,name=backendCompletelyDisable,proto3" json:"backendCompletelyDisable,omitempty"`
	Name                     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Namespace                string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PendingPlan              string `protobuf:"bytes,5,opt,name=pendingPlan,proto3" json:"pendingPlan,omitempty"`
}

func (x *LoadTFPlanRequest) Reset() {
	*x = LoadTFPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadTFPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTFPlanRequest) ProtoMessage() {}

func (x *LoadTFPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTFPlanRequest.ProtoReflect.Descriptor instead.
func (*LoadTFPlanRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{29}
}

func (x *LoadTFPlanRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *LoadTFPlanRequest) GetBackendCompletelyDisable() bool {
	if x != nil {
		return x.BackendCompletelyDisable
	}
	return false
}

func (x *LoadTFPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadTFPlanRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LoadTFPlanRequest) GetPendingPlan() string {
	if x != nil {
		return x.PendingPlan
	}
	return ""
}

type LoadTFPlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LoadTFPlanReply) Reset() {
	*x = LoadTFPlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadTFPlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTFPlanReply) ProtoMessage() {}

func (x *LoadTFPlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTFPlanReply.ProtoReflect.Descriptor instead.
func (*LoadTFPlanReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{30}
}

func (x *LoadTFPlanReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance         string   `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	DirOrPlan          string   `protobuf:"bytes,2,opt,name=dirOrPlan,proto3" json:"dirOrPlan,omitempty"`
	RefreshBeforeApply bool     `protobuf:"varint,3,opt,name=refreshBeforeApply,proto3" json:"refreshBeforeApply,omitempty"`
	Targets            []string `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	Parallelism        int32    `protobuf:"varint,5,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{31}
}

func (x *ApplyRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *ApplyRequest) GetDirOrPlan() string {
	if x != nil {
		return x.DirOrPlan
	}
	return ""
}

func (x *ApplyRequest) GetRefreshBeforeApply() bool {
	if x != nil {
		return x.RefreshBeforeApply
	}
	return false
}

func (x *ApplyRequest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ApplyRequest) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

type ApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message             string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StateLockIdentifier string `protobuf:"bytes,2,opt,name=stateLockIdentifier,proto3" json:"stateLockIdentifier,omitempty"`
}

func (x *ApplyReply) Reset() {
	*x = ApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyReply) ProtoMessage() {}

func (x *ApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyReply.ProtoReflect.Descriptor instead.
func (*ApplyReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{32}
}

func (x *ApplyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApplyReply) GetStateLockIdentifier() string {
	if x != nil {
		return x.StateLockIdentifier
	}
	return ""
}

type GetInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
}

func (x *GetInventoryRequest) Reset() {
	*x = GetInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryRequest) ProtoMessage() {}

func (x *GetInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryRequest.ProtoReflect.Descriptor instead.
func (*GetInventoryRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{33}
}

func (x *GetInventoryRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

type GetInventoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inventories []*Inventory `protobuf:"bytes,1,rep,name=inventories,proto3" json:"inventories,omitempty"`
}

func (x *GetInventoryReply) Reset() {
	*x = GetInventoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInventoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryReply) ProtoMessage() {}

func (x *GetInventoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryReply.ProtoReflect.Descriptor instead.
func (*GetInventoryReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{34}
}

func (x *GetInventoryReply) GetInventories() []*Inventory {
	if x != nil {
		return x.Inventories
	}
	return nil
}

type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{35}
}

func (x *Inventory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Inventory) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Inventory) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type DestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string   `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	Targets    []string `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *DestroyRequest) Reset() {
	*x = DestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRequest) ProtoMessage() {}

func (x *DestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRequest.ProtoReflect.Descriptor instead.
func (*DestroyRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{36}
}

func (x *DestroyRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *DestroyRequest) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

type DestroyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message             string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StateLockIdentifier string `protobuf:"bytes,2,opt,name=stateLockIdentifier,proto3" json:"stateLockIdentifier,omitempty"`
}

func (x *DestroyReply) Reset() {
	*x = DestroyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReply) ProtoMessage() {}

func (x *DestroyReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReply.ProtoReflect.Descriptor instead.
func (*DestroyReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{37}
}

func (x *DestroyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DestroyReply) GetStateLockIdentifier() string {
	if x != nil {
		return x.StateLockIdentifier
	}
	return ""
}

type OutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
}

func (x *OutputRequest) Reset() {
	*x = OutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputRequest) ProtoMessage() {}

func (x *OutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputRequest.ProtoReflect.Descriptor instead.
func (*OutputRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{38}
}

func (x *OutputRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

type OutputReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs map[string]*OutputMeta `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OutputReply) Reset() {
	*x = OutputReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputReply) ProtoMessage() {}

func (x *OutputReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputReply.ProtoReflect.Descriptor instead.
func (*OutputReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{39}
}

func (x *OutputReply) GetOutputs() map[string]*OutputMeta {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type OutputMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensitive bool   `protobuf:"varint,1,opt,name=sensitive,proto3" json:"sensitive,omitempty"`
	Type      []byte `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OutputMeta) Reset() {
	*x = OutputMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputMeta) ProtoMessage() {}

func (x *OutputMeta) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputMeta.ProtoReflect.Descriptor instead.
func (*OutputMeta) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{40}
}

func (x *OutputMeta) GetSensitive() bool {
	if x != nil {
		return x.Sensitive
	}
	return false
}

func (x *OutputMeta) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *OutputMeta) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type WriteOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace   string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SecretName  string            `protobuf:"bytes,3,opt,name=secretName,proto3" json:"secretName,omitempty"`
	Uuid        string            `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Data        map[string][]byte `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels      map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteOutputsRequest) Reset() {
	*x = WriteOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOutputsRequest) ProtoMessage() {}

func (x *WriteOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOutputsRequest.ProtoReflect.Descriptor instead.
func (*WriteOutputsRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{41}
}

func (x *WriteOutputsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WriteOutputsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WriteOutputsRequest) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *WriteOutputsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *WriteOutputsRequest) GetData() map[string][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteOutputsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WriteOutputsRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type WriteOutputsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Changed bool   `protobuf:"varint,2,opt,name=changed,proto3" json:"changed,omitempty"`
}

func (x *WriteOutputsReply) Reset() {
	*x = WriteOutputsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOutputsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOutputsReply) ProtoMessage() {}

func (x *WriteOutputsReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOutputsReply.ProtoReflect.Descriptor instead.
func (*WriteOutputsReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{42}
}

func (x *WriteOutputsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WriteOutputsReply) GetChanged() bool {
	if x != nil {
		return x.Changed
	}
	return false
}

type GetOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SecretName string `protobuf:"bytes,2,opt,name=secretName,proto3" json:"secretName,omitempty"`
}

func (x *GetOutputsRequest) Reset() {
	*x = GetOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutputsRequest) ProtoMessage() {}

func (x *GetOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutputsRequest.ProtoReflect.Descriptor instead.
func (*GetOutputsRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{43}
}

func (x *GetOutputsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetOutputsRequest) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

type GetOutputsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs map[string]string `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetOutputsReply) Reset() {
	*x = GetOutputsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutputsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutputsReply) ProtoMessage() {}

func (x *GetOutputsReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutputsReply.ProtoReflect.Descriptor instead.
func (*GetOutputsReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{44}
}

func (x *GetOutputsReply) GetOutputs() map[string]string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	Upgrade    bool   `protobuf:"varint,2,opt,name=upgrade,proto3" json:"upgrade,omitempty"`
	ForceCopy  bool   `protobuf:"varint,3,opt,name=forceCopy,proto3" json:"forceCopy,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{45}
}

func (x *InitRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *InitRequest) GetUpgrade() bool {
	if x != nil {
		return x.Upgrade
	}
	return false
}

func (x *InitRequest) GetForceCopy() bool {
	if x != nil {
		return x.ForceCopy
	}
	return false
}

type InitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message             string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StateLockIdentifier string `protobuf:"bytes,2,opt,name=stateLockIdentifier,proto3" json:"stateLockIdentifier,omitempty"`
}

func (x *InitReply) Reset() {
	*x = InitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitReply) ProtoMessage() {}

func (x *InitReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitReply.ProtoReflect.Descriptor instead.
func (*InitReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{46}
}

func (x *InitReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InitReply) GetStateLockIdentifier() string {
	if x != nil {
		return x.StateLockIdentifier
	}
	return ""
}

type WorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
}

func (x *WorkspaceRequest) Reset() {
	*x = WorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceRequest) ProtoMessage() {}

func (x *WorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceRequest.ProtoReflect.Descriptor instead.
func (*WorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{47}
}

func (x *WorkspaceRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

type WorkspaceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WorkspaceReply) Reset() {
	*x = WorkspaceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceReply) ProtoMessage() {}

func (x *WorkspaceReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceReply.ProtoReflect.Descriptor instead.
func (*WorkspaceReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{48}
}

func (x *WorkspaceReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateWorkspaceBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfInstance string `protobuf:"bytes,1,opt,name=tfInstance,proto3" json:"tfInstance,omitempty"`
	WorkingDir string `protobuf:"bytes,2,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Namespace  string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CreateWorkspaceBlobRequest) Reset() {
	*x = CreateWorkspaceBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkspaceBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkspaceBlobRequest) ProtoMessage() {}

func (x *CreateWorkspaceBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkspaceBlobRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkspaceBlobRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{49}
}

func (x *CreateWorkspaceBlobRequest) GetTfInstance() string {
	if x != nil {
		return x.TfInstance
	}
	return ""
}

func (x *CreateWorkspaceBlobRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *CreateWorkspaceBlobRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CreateWorkspaceBlobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob           []byte `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	Sha256Checksum []byte `protobuf:"bytes,3,opt,name=sha256Checksum,proto3" json:"sha256Checksum,omitempty"`
}

func (x *CreateWorkspaceBlobReply) Reset() {
	*x = CreateWorkspaceBlobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkspaceBlobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkspaceBlobReply) ProtoMessage() {}

func (x *CreateWorkspaceBlobReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkspaceBlobReply.ProtoReflect.Descriptor instead.
func (*CreateWorkspaceBlobReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{50}
}

func (x *CreateWorkspaceBlobReply) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *CreateWorkspaceBlobReply) GetSha256Checksum() []byte {
	if x != nil {
		return x.Sha256Checksum
	}
	return nil
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{51}
}

func (x *UploadRequest) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type UploadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UploadReply) Reset() {
	*x = UploadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadReply) ProtoMessage() {}

func (x *UploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadReply.ProtoReflect.Descriptor instead.
func (*UploadReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{52}
}

func (x *UploadReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FinalizeSecretsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace                string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Workspace                string `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	HasSpecifiedOutputSecret bool   `protobuf:"varint,4,opt,name=hasSpecifiedOutputSecret,proto3" json:"hasSpecifiedOutputSecret,omitempty"`
	OutputSecretName         string `protobuf:"bytes,5,opt,name=outputSecretName,proto3" json:"outputSecretName,omitempty"`
}

func (x *FinalizeSecretsRequest) Reset() {
	*x = FinalizeSecretsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeSecretsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeSecretsRequest) ProtoMessage() {}

func (x *FinalizeSecretsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeSecretsRequest.ProtoReflect.Descriptor instead.
func (*FinalizeSecretsRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{53}
}

func (x *FinalizeSecretsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FinalizeSecretsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinalizeSecretsRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *FinalizeSecretsRequest) GetHasSpecifiedOutputSecret() bool {
	if x != nil {
		return x.HasSpecifiedOutputSecret
	}
	return false
}

func (x *FinalizeSecretsRequest) GetOutputSecretName() string {
	if x != nil {
		return x.OutputSecretName
	}
	return ""
}

type FinalizeSecretsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	NotFound bool   `protobuf:"varint,2,opt,name=notFound,proto3" json:"notFound,omitempty"`
}

func (x *FinalizeSecretsReply) Reset() {
	*x = FinalizeSecretsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeSecretsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeSecretsReply) ProtoMessage() {}

func (x *FinalizeSecretsReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeSecretsReply.ProtoReflect.Descriptor instead.
func (*FinalizeSecretsReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{54}
}

func (x *FinalizeSecretsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FinalizeSecretsReply) GetNotFound() bool {
	if x != nil {
		return x.NotFound
	}
	return false
}

type ForceUnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockIdentifier string `protobuf:"bytes,1,opt,name=lockIdentifier,proto3" json:"lockIdentifier,omitempty"`
}

func (x *ForceUnlockRequest) Reset() {
	*x = ForceUnlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceUnlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceUnlockRequest) ProtoMessage() {}

func (x *ForceUnlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceUnlockRequest.ProtoReflect.Descriptor instead.
func (*ForceUnlockRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{55}
}

func (x *ForceUnlockRequest) GetLockIdentifier() string {
	if x != nil {
		return x.LockIdentifier
	}
	return ""
}

type ForceUnlockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ForceUnlockReply) Reset() {
	*x = ForceUnlockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceUnlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceUnlockReply) ProtoMessage() {}

func (x *ForceUnlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceUnlockReply.ProtoReflect.Descriptor instead.
func (*ForceUnlockReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{56}
}

func (x *ForceUnlockReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ForceUnlockReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type BreakTheGlassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BreakTheGlassRequest) Reset() {
	*x = BreakTheGlassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakTheGlassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakTheGlassRequest) ProtoMessage() {}

func (x *BreakTheGlassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakTheGlassRequest.ProtoReflect.Descriptor instead.
func (*BreakTheGlassRequest) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{57}
}

type BreakTheGlassReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *BreakTheGlassReply) Reset() {
	*x = BreakTheGlassReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_runner_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakTheGlassReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakTheGlassReply) ProtoMessage() {}

func (x *BreakTheGlassReply) ProtoReflect() protoreflect.Message {
	mi := &file_runner_runner_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakTheGlassReply.ProtoReflect.Descriptor instead.
func (*BreakTheGlassReply) Descriptor() ([]byte, []int) {
	return file_runner_runner_proto_rawDescGZIP(), []int{58}
}

func (x *BreakTheGlassReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BreakTheGlassReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_runner_runner_proto protoreflect.FileDescriptor

var file_runner_runner_proto_rawDesc = []byte{
	0x0a, 0x13, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x25, 0x0a,
	0x0f, 0x4c, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x22, 0x23, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x6e,
	0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x57, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x74, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x33, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x72, 0x47, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x74, 0x61, 0x72, 0x47, 0x7a, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4f, 0x0a, 0x15,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x22, 0x2b, 0x0a,
	0x11, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x22, 0x2b, 0x0a, 0x0f, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a, 0x19, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x33, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x17, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x33, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x69, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3a, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x22, 0x32, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72,
	0x73, 0x46, 0x6f, 0x72, 0x54, 0x46, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69,
	0x72, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x11, 0x53, 0x68,
	0x6f, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x54, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x61, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x61, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x11,
	0x53, 0x61, 0x76, 0x65, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x2b, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3, 0x01, 0x0a,
	0x11, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x22, 0x2b, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xb8, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x4f, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x22, 0x58, 0x0a, 0x0a, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x0e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x2f, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a,
	0x4e, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x54, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfb, 0x03, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x4e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x65, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x70, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x22, 0x57, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x32, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x7a, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x22, 0x23, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x27, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x68, 0x61, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x68, 0x61, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x46, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x48, 0x0a, 0x12, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xd4, 0x10, 0x0a, 0x06, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77,
	0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x06, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x44, 0x69, 0x72, 0x12, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x44, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x46, 0x12, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x46, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x46, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61,
	0x77, 0x12, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x46, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x46, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x2e, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x16, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x19, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x12, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c,
	0x61, 0x73, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1b, 0x48, 0x61, 0x73, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x54, 0x68, 0x65, 0x47, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x08, 0x5a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_runner_runner_proto_rawDescOnce sync.Once
	file_runner_runner_proto_rawDescData = file_runner_runner_proto_rawDesc
)

func file_runner_runner_proto_rawDescGZIP() []byte {
	file_runner_runner_proto_rawDescOnce.Do(func() {
		file_runner_runner_proto_rawDescData = protoimpl.X.CompressGZIP(file_runner_runner_proto_rawDescData)
	})
	return file_runner_runner_proto_rawDescData
}

var file_runner_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_runner_runner_proto_goTypes = []interface{}{
	(*LookPathRequest)(nil),            // 0: runner.LookPathRequest
	(*LookPathReply)(nil),              // 1: runner.LookPathReply
	(*NewTerraformRequest)(nil),        // 2: runner.NewTerraformRequest
	(*NewTerraformReply)(nil),          // 3: runner.NewTerraformReply
	(*SetEnvRequest)(nil),              // 4: runner.SetEnvRequest
	(*SetEnvReply)(nil),                // 5: runner.SetEnvReply
	(*FileMapping)(nil),                // 6: runner.fileMapping
	(*CreateFileMappingsRequest)(nil),  // 7: runner.CreateFileMappingsRequest
	(*CreateFileMappingsReply)(nil),    // 8: runner.CreateFileMappingsReply
	(*UploadAndExtractRequest)(nil),    // 9: runner.UploadAndExtractRequest
	(*UploadAndExtractReply)(nil),      // 10: runner.UploadAndExtractReply
	(*CleanupDirRequest)(nil),          // 11: runner.CleanupDirRequest
	(*CleanupDirReply)(nil),            // 12: runner.CleanupDirReply
	(*WriteBackendConfigRequest)(nil),  // 13: runner.WriteBackendConfigRequest
	(*WriteBackendConfigReply)(nil),    // 14: runner.WriteBackendConfigReply
	(*ProcessCliConfigRequest)(nil),    // 15: runner.ProcessCliConfigRequest
	(*ProcessCliConfigReply)(nil),      // 16: runner.ProcessCliConfigReply
	(*GenerateVarsForTFRequest)(nil),   // 17: runner.GenerateVarsForTFRequest
	(*GenerateVarsForTFReply)(nil),     // 18: runner.GenerateVarsForTFReply
	(*GenerateTemplateRequest)(nil),    // 19: runner.GenerateTemplateRequest
	(*GenerateTemplateReply)(nil),      // 20: runner.GenerateTemplateReply
	(*PlanRequest)(nil),                // 21: runner.PlanRequest
	(*PlanReply)(nil),                  // 22: runner.PlanReply
	(*ShowPlanFileRequest)(nil),        // 23: runner.ShowPlanFileRequest
	(*ShowPlanFileReply)(nil),          // 24: runner.ShowPlanFileReply
	(*ShowPlanFileRawRequest)(nil),     // 25: runner.ShowPlanFileRawRequest
	(*ShowPlanFileRawReply)(nil),       // 26: runner.ShowPlanFileRawReply
	(*SaveTFPlanRequest)(nil),          // 27: runner.SaveTFPlanRequest
	(*SaveTFPlanReply)(nil),            // 28: runner.SaveTFPlanReply
	(*LoadTFPlanRequest)(nil),          // 29: runner.LoadTFPlanRequest
	(*LoadTFPlanReply)(nil),            // 30: runner.LoadTFPlanReply
	(*ApplyRequest)(nil),               // 31: runner.ApplyRequest
	(*ApplyReply)(nil),                 // 32: runner.ApplyReply
	(*GetInventoryRequest)(nil),        // 33: runner.GetInventoryRequest
	(*GetInventoryReply)(nil),          // 34: runner.GetInventoryReply
	(*Inventory)(nil),                  // 35: runner.Inventory
	(*DestroyRequest)(nil),             // 36: runner.DestroyRequest
	(*DestroyReply)(nil),               // 37: runner.DestroyReply
	(*OutputRequest)(nil),              // 38: runner.OutputRequest
	(*OutputReply)(nil),                // 39: runner.OutputReply
	(*OutputMeta)(nil),                 // 40: runner.OutputMeta
	(*WriteOutputsRequest)(nil),        // 41: runner.WriteOutputsRequest
	(*WriteOutputsReply)(nil),          // 42: runner.WriteOutputsReply
	(*GetOutputsRequest)(nil),          // 43: runner.GetOutputsRequest
	(*GetOutputsReply)(nil),            // 44: runner.GetOutputsReply
	(*InitRequest)(nil),                // 45: runner.InitRequest
	(*InitReply)(nil),                  // 46: runner.InitReply
	(*WorkspaceRequest)(nil),           // 47: runner.WorkspaceRequest
	(*WorkspaceReply)(nil),             // 48: runner.WorkspaceReply
	(*CreateWorkspaceBlobRequest)(nil), // 49: runner.CreateWorkspaceBlobRequest
	(*CreateWorkspaceBlobReply)(nil),   // 50: runner.CreateWorkspaceBlobReply
	(*UploadRequest)(nil),              // 51: runner.UploadRequest
	(*UploadReply)(nil),                // 52: runner.UploadReply
	(*FinalizeSecretsRequest)(nil),     // 53: runner.FinalizeSecretsRequest
	(*FinalizeSecretsReply)(nil),       // 54: runner.FinalizeSecretsReply
	(*ForceUnlockRequest)(nil),         // 55: runner.ForceUnlockRequest
	(*ForceUnlockReply)(nil),           // 56: runner.ForceUnlockReply
	(*BreakTheGlassRequest)(nil),       // 57: runner.BreakTheGlassRequest
	(*BreakTheGlassReply)(nil),         // 58: runner.BreakTheGlassReply
	nil,                                // 59: runner.SetEnvRequest.EnvsEntry
	nil,                                // 60: runner.OutputReply.OutputsEntry
	nil,                                // 61: runner.WriteOutputsRequest.DataEntry
	nil,                                // 62: runner.WriteOutputsRequest.LabelsEntry
	nil,                                // 63: runner.WriteOutputsRequest.AnnotationsEntry
	nil,                                // 64: runner.GetOutputsReply.OutputsEntry
}
var file_runner_runner_proto_depIdxs = []int32{
	59, // 0: runner.SetEnvRequest.envs:type_name -> runner.SetEnvRequest.EnvsEntry
	6,  // 1: runner.CreateFileMappingsRequest.fileMappings:type_name -> runner.fileMapping
	35, // 2: runner.GetInventoryReply.inventories:type_name -> runner.Inventory
	60, // 3: runner.OutputReply.outputs:type_name -> runner.OutputReply.OutputsEntry
	61, // 4: runner.WriteOutputsRequest.data:type_name -> runner.WriteOutputsRequest.DataEntry
	62, // 5: runner.WriteOutputsRequest.labels:type_name -> runner.WriteOutputsRequest.LabelsEntry
	63, // 6: runner.WriteOutputsRequest.annotations:type_name -> runner.WriteOutputsRequest.AnnotationsEntry
	64, // 7: runner.GetOutputsReply.outputs:type_name -> runner.GetOutputsReply.OutputsEntry
	40, // 8: runner.OutputReply.OutputsEntry.value:type_name -> runner.OutputMeta
	0,  // 9: runner.Runner.LookPath:input_type -> runner.LookPathRequest
	2,  // 10: runner.Runner.NewTerraform:input_type -> runner.NewTerraformRequest
	4,  // 11: runner.Runner.SetEnv:input_type -> runner.SetEnvRequest
	7,  // 12: runner.Runner.CreateFileMappings:input_type -> runner.CreateFileMappingsRequest
	9,  // 13: runner.Runner.UploadAndExtract:input_type -> runner.UploadAndExtractRequest
	11, // 14: runner.Runner.CleanupDir:input_type -> runner.CleanupDirRequest
	13, // 15: runner.Runner.WriteBackendConfig:input_type -> runner.WriteBackendConfigRequest
	15, // 16: runner.Runner.ProcessCliConfig:input_type -> runner.ProcessCliConfigRequest
	17, // 17: runner.Runner.GenerateVarsForTF:input_type -> runner.GenerateVarsForTFRequest
	19, // 18: runner.Runner.GenerateTemplate:input_type -> runner.GenerateTemplateRequest
	21, // 19: runner.Runner.Plan:input_type -> runner.PlanRequest
	25, // 20: runner.Runner.ShowPlanFileRaw:input_type -> runner.ShowPlanFileRawRequest
	23, // 21: runner.Runner.ShowPlanFile:input_type -> runner.ShowPlanFileRequest
	27, // 22: runner.Runner.SaveTFPlan:input_type -> runner.SaveTFPlanRequest
	29, // 23: runner.Runner.LoadTFPlan:input_type -> runner.LoadTFPlanRequest
	31, // 24: runner.Runner.Apply:input_type -> runner.ApplyRequest
	33, // 25: runner.Runner.GetInventory:input_type -> runner.GetInventoryRequest
	36, // 26: runner.Runner.Destroy:input_type -> runner.DestroyRequest
	38, // 27: runner.Runner.Output:input_type -> runner.OutputRequest
	41, // 28: runner.Runner.WriteOutputs:input_type -> runner.WriteOutputsRequest
	43, // 29: runner.Runner.GetOutputs:input_type -> runner.GetOutputsRequest
	45, // 30: runner.Runner.Init:input_type -> runner.InitRequest
	47, // 31: runner.Runner.SelectWorkspace:input_type -> runner.WorkspaceRequest
	49, // 32: runner.Runner.CreateWorkspaceBlob:input_type -> runner.CreateWorkspaceBlobRequest
	51, // 33: runner.Runner.Upload:input_type -> runner.UploadRequest
	53, // 34: runner.Runner.FinalizeSecrets:input_type -> runner.FinalizeSecretsRequest
	55, // 35: runner.Runner.ForceUnlock:input_type -> runner.ForceUnlockRequest
	57, // 36: runner.Runner.StartBreakTheGlassSession:input_type -> runner.BreakTheGlassRequest
	57, // 37: runner.Runner.HasBreakTheGlassSessionDone:input_type -> runner.BreakTheGlassRequest
	1,  // 38: runner.Runner.LookPath:output_type -> runner.LookPathReply
	3,  // 39: runner.Runner.NewTerraform:output_type -> runner.NewTerraformReply
	5,  // 40: runner.Runner.SetEnv:output_type -> runner.SetEnvReply
	8,  // 41: runner.Runner.CreateFileMappings:output_type -> runner.CreateFileMappingsReply
	10, // 42: runner.Runner.UploadAndExtract:output_type -> runner.UploadAndExtractReply
	12, // 43: runner.Runner.CleanupDir:output_type -> runner.CleanupDirReply
	14, // 44: runner.Runner.WriteBackendConfig:output_type -> runner.WriteBackendConfigReply
	16, // 45: runner.Runner.ProcessCliConfig:output_type -> runner.ProcessCliConfigReply
	18, // 46: runner.Runner.GenerateVarsForTF:output_type -> runner.GenerateVarsForTFReply
	20, // 47: runner.Runner.GenerateTemplate:output_type -> runner.GenerateTemplateReply
	22, // 48: runner.Runner.Plan:output_type -> runner.PlanReply
	26, // 49: runner.Runner.ShowPlanFileRaw:output_type -> runner.ShowPlanFileRawReply
	24, // 50: runner.Runner.ShowPlanFile:output_type -> runner.ShowPlanFileReply
	28, // 51: runner.Runner.SaveTFPlan:output_type -> runner.SaveTFPlanReply
	30, // 52: runner.Runner.LoadTFPlan:output_type -> runner.LoadTFPlanReply
	32, // 53: runner.Runner.Apply:output_type -> runner.ApplyReply
	34, // 54: runner.Runner.GetInventory:output_type -> runner.GetInventoryReply
	37, // 55: runner.Runner.Destroy:output_type -> runner.DestroyReply
	39, // 56: runner.Runner.Output:output_type -> runner.OutputReply
	42, // 57: runner.Runner.WriteOutputs:output_type -> runner.WriteOutputsReply
	44, // 58: runner.Runner.GetOutputs:output_type -> runner.GetOutputsReply
	46, // 59: runner.Runner.Init:output_type -> runner.InitReply
	48, // 60: runner.Runner.SelectWorkspace:output_type -> runner.WorkspaceReply
	50, // 61: runner.Runner.CreateWorkspaceBlob:output_type -> runner.CreateWorkspaceBlobReply
	52, // 62: runner.Runner.Upload:output_type -> runner.UploadReply
	54, // 63: runner.Runner.FinalizeSecrets:output_type -> runner.FinalizeSecretsReply
	56, // 64: runner.Runner.ForceUnlock:output_type -> runner.ForceUnlockReply
	58, // 65: runner.Runner.StartBreakTheGlassSession:output_type -> runner.BreakTheGlassReply
	58, // 66: runner.Runner.HasBreakTheGlassSessionDone:output_type -> runner.BreakTheGlassReply
	38, // [38:67] is the sub-list for method output_type
	9,  // [9:38] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_runner_runner_proto_init() }
func file_runner_runner_proto_init() {
	if File_runner_runner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runner_runner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookPathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTerraformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTerraformReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileMappingsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAndExtractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAndExtractReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupDirReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteBackendConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteBackendConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessCliConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessCliConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateVarsForTFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateVarsForTFReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPlanFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPlanFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPlanFileRawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPlanFileRawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTFPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTFPlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadTFPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadTFPlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInventoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOutputsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutputsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkspaceBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkspaceBlobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeSecretsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeSecretsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceUnlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceUnlockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakTheGlassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_runner_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakTheGlassReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runner_runner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runner_runner_proto_goTypes,
		DependencyIndexes: file_runner_runner_proto_depIdxs,
		MessageInfos:      file_runner_runner_proto_msgTypes,
	}.Build()
	File_runner_runner_proto = out.File
	file_runner_runner_proto_rawDesc = nil
	file_runner_runner_proto_goTypes = nil
	file_runner_runner_proto_depIdxs = nil
}
