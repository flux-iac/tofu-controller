// Code generated by counterfeiter. DO NOT EDIT.
package providerfakes

import (
	"sync"
	"time"

	"github.com/flux-iac/tofu-controller/internal/git/provider"
	"github.com/go-logr/logr"
	"golang.org/x/net/context"
)

type FakeProvider struct {
	AddCommentToPullRequestStub        func(context.Context, provider.PullRequest, []byte) (*provider.Comment, error)
	addCommentToPullRequestMutex       sync.RWMutex
	addCommentToPullRequestArgsForCall []struct {
		arg1 context.Context
		arg2 provider.PullRequest
		arg3 []byte
	}
	addCommentToPullRequestReturns struct {
		result1 *provider.Comment
		result2 error
	}
	addCommentToPullRequestReturnsOnCall map[int]struct {
		result1 *provider.Comment
		result2 error
	}
	GetLastCommentsStub        func(context.Context, provider.PullRequest, time.Time) ([]*provider.Comment, error)
	getLastCommentsMutex       sync.RWMutex
	getLastCommentsArgsForCall []struct {
		arg1 context.Context
		arg2 provider.PullRequest
		arg3 time.Time
	}
	getLastCommentsReturns struct {
		result1 []*provider.Comment
		result2 error
	}
	getLastCommentsReturnsOnCall map[int]struct {
		result1 []*provider.Comment
		result2 error
	}
	ListPullRequestChangesStub        func(context.Context, provider.PullRequest) ([]provider.Change, error)
	listPullRequestChangesMutex       sync.RWMutex
	listPullRequestChangesArgsForCall []struct {
		arg1 context.Context
		arg2 provider.PullRequest
	}
	listPullRequestChangesReturns struct {
		result1 []provider.Change
		result2 error
	}
	listPullRequestChangesReturnsOnCall map[int]struct {
		result1 []provider.Change
		result2 error
	}
	ListPullRequestsStub        func(context.Context, provider.Repository) ([]provider.PullRequest, error)
	listPullRequestsMutex       sync.RWMutex
	listPullRequestsArgsForCall []struct {
		arg1 context.Context
		arg2 provider.Repository
	}
	listPullRequestsReturns struct {
		result1 []provider.PullRequest
		result2 error
	}
	listPullRequestsReturnsOnCall map[int]struct {
		result1 []provider.PullRequest
		result2 error
	}
	SetHostnameStub        func(string) error
	setHostnameMutex       sync.RWMutex
	setHostnameArgsForCall []struct {
		arg1 string
	}
	setHostnameReturns struct {
		result1 error
	}
	setHostnameReturnsOnCall map[int]struct {
		result1 error
	}
	SetLoggerStub        func(logr.Logger) error
	setLoggerMutex       sync.RWMutex
	setLoggerArgsForCall []struct {
		arg1 logr.Logger
	}
	setLoggerReturns struct {
		result1 error
	}
	setLoggerReturnsOnCall map[int]struct {
		result1 error
	}
	SetTokenStub        func(string, string) error
	setTokenMutex       sync.RWMutex
	setTokenArgsForCall []struct {
		arg1 string
		arg2 string
	}
	setTokenReturns struct {
		result1 error
	}
	setTokenReturnsOnCall map[int]struct {
		result1 error
	}
	SetupStub        func() error
	setupMutex       sync.RWMutex
	setupArgsForCall []struct {
	}
	setupReturns struct {
		result1 error
	}
	setupReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCommentOfPullRequestStub        func(context.Context, provider.PullRequest, int, []byte) error
	updateCommentOfPullRequestMutex       sync.RWMutex
	updateCommentOfPullRequestArgsForCall []struct {
		arg1 context.Context
		arg2 provider.PullRequest
		arg3 int
		arg4 []byte
	}
	updateCommentOfPullRequestReturns struct {
		result1 error
	}
	updateCommentOfPullRequestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProvider) AddCommentToPullRequest(arg1 context.Context, arg2 provider.PullRequest, arg3 []byte) (*provider.Comment, error) {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.addCommentToPullRequestMutex.Lock()
	ret, specificReturn := fake.addCommentToPullRequestReturnsOnCall[len(fake.addCommentToPullRequestArgsForCall)]
	fake.addCommentToPullRequestArgsForCall = append(fake.addCommentToPullRequestArgsForCall, struct {
		arg1 context.Context
		arg2 provider.PullRequest
		arg3 []byte
	}{arg1, arg2, arg3Copy})
	stub := fake.AddCommentToPullRequestStub
	fakeReturns := fake.addCommentToPullRequestReturns
	fake.recordInvocation("AddCommentToPullRequest", []interface{}{arg1, arg2, arg3Copy})
	fake.addCommentToPullRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProvider) AddCommentToPullRequestCallCount() int {
	fake.addCommentToPullRequestMutex.RLock()
	defer fake.addCommentToPullRequestMutex.RUnlock()
	return len(fake.addCommentToPullRequestArgsForCall)
}

func (fake *FakeProvider) AddCommentToPullRequestCalls(stub func(context.Context, provider.PullRequest, []byte) (*provider.Comment, error)) {
	fake.addCommentToPullRequestMutex.Lock()
	defer fake.addCommentToPullRequestMutex.Unlock()
	fake.AddCommentToPullRequestStub = stub
}

func (fake *FakeProvider) AddCommentToPullRequestArgsForCall(i int) (context.Context, provider.PullRequest, []byte) {
	fake.addCommentToPullRequestMutex.RLock()
	defer fake.addCommentToPullRequestMutex.RUnlock()
	argsForCall := fake.addCommentToPullRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProvider) AddCommentToPullRequestReturns(result1 *provider.Comment, result2 error) {
	fake.addCommentToPullRequestMutex.Lock()
	defer fake.addCommentToPullRequestMutex.Unlock()
	fake.AddCommentToPullRequestStub = nil
	fake.addCommentToPullRequestReturns = struct {
		result1 *provider.Comment
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) AddCommentToPullRequestReturnsOnCall(i int, result1 *provider.Comment, result2 error) {
	fake.addCommentToPullRequestMutex.Lock()
	defer fake.addCommentToPullRequestMutex.Unlock()
	fake.AddCommentToPullRequestStub = nil
	if fake.addCommentToPullRequestReturnsOnCall == nil {
		fake.addCommentToPullRequestReturnsOnCall = make(map[int]struct {
			result1 *provider.Comment
			result2 error
		})
	}
	fake.addCommentToPullRequestReturnsOnCall[i] = struct {
		result1 *provider.Comment
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) GetLastComments(arg1 context.Context, arg2 provider.PullRequest, arg3 time.Time) ([]*provider.Comment, error) {
	fake.getLastCommentsMutex.Lock()
	ret, specificReturn := fake.getLastCommentsReturnsOnCall[len(fake.getLastCommentsArgsForCall)]
	fake.getLastCommentsArgsForCall = append(fake.getLastCommentsArgsForCall, struct {
		arg1 context.Context
		arg2 provider.PullRequest
		arg3 time.Time
	}{arg1, arg2, arg3})
	stub := fake.GetLastCommentsStub
	fakeReturns := fake.getLastCommentsReturns
	fake.recordInvocation("GetLastComments", []interface{}{arg1, arg2, arg3})
	fake.getLastCommentsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProvider) GetLastCommentsCallCount() int {
	fake.getLastCommentsMutex.RLock()
	defer fake.getLastCommentsMutex.RUnlock()
	return len(fake.getLastCommentsArgsForCall)
}

func (fake *FakeProvider) GetLastCommentsCalls(stub func(context.Context, provider.PullRequest, time.Time) ([]*provider.Comment, error)) {
	fake.getLastCommentsMutex.Lock()
	defer fake.getLastCommentsMutex.Unlock()
	fake.GetLastCommentsStub = stub
}

func (fake *FakeProvider) GetLastCommentsArgsForCall(i int) (context.Context, provider.PullRequest, time.Time) {
	fake.getLastCommentsMutex.RLock()
	defer fake.getLastCommentsMutex.RUnlock()
	argsForCall := fake.getLastCommentsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProvider) GetLastCommentsReturns(result1 []*provider.Comment, result2 error) {
	fake.getLastCommentsMutex.Lock()
	defer fake.getLastCommentsMutex.Unlock()
	fake.GetLastCommentsStub = nil
	fake.getLastCommentsReturns = struct {
		result1 []*provider.Comment
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) GetLastCommentsReturnsOnCall(i int, result1 []*provider.Comment, result2 error) {
	fake.getLastCommentsMutex.Lock()
	defer fake.getLastCommentsMutex.Unlock()
	fake.GetLastCommentsStub = nil
	if fake.getLastCommentsReturnsOnCall == nil {
		fake.getLastCommentsReturnsOnCall = make(map[int]struct {
			result1 []*provider.Comment
			result2 error
		})
	}
	fake.getLastCommentsReturnsOnCall[i] = struct {
		result1 []*provider.Comment
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) ListPullRequestChanges(arg1 context.Context, arg2 provider.PullRequest) ([]provider.Change, error) {
	fake.listPullRequestChangesMutex.Lock()
	ret, specificReturn := fake.listPullRequestChangesReturnsOnCall[len(fake.listPullRequestChangesArgsForCall)]
	fake.listPullRequestChangesArgsForCall = append(fake.listPullRequestChangesArgsForCall, struct {
		arg1 context.Context
		arg2 provider.PullRequest
	}{arg1, arg2})
	stub := fake.ListPullRequestChangesStub
	fakeReturns := fake.listPullRequestChangesReturns
	fake.recordInvocation("ListPullRequestChanges", []interface{}{arg1, arg2})
	fake.listPullRequestChangesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProvider) ListPullRequestChangesCallCount() int {
	fake.listPullRequestChangesMutex.RLock()
	defer fake.listPullRequestChangesMutex.RUnlock()
	return len(fake.listPullRequestChangesArgsForCall)
}

func (fake *FakeProvider) ListPullRequestChangesCalls(stub func(context.Context, provider.PullRequest) ([]provider.Change, error)) {
	fake.listPullRequestChangesMutex.Lock()
	defer fake.listPullRequestChangesMutex.Unlock()
	fake.ListPullRequestChangesStub = stub
}

func (fake *FakeProvider) ListPullRequestChangesArgsForCall(i int) (context.Context, provider.PullRequest) {
	fake.listPullRequestChangesMutex.RLock()
	defer fake.listPullRequestChangesMutex.RUnlock()
	argsForCall := fake.listPullRequestChangesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProvider) ListPullRequestChangesReturns(result1 []provider.Change, result2 error) {
	fake.listPullRequestChangesMutex.Lock()
	defer fake.listPullRequestChangesMutex.Unlock()
	fake.ListPullRequestChangesStub = nil
	fake.listPullRequestChangesReturns = struct {
		result1 []provider.Change
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) ListPullRequestChangesReturnsOnCall(i int, result1 []provider.Change, result2 error) {
	fake.listPullRequestChangesMutex.Lock()
	defer fake.listPullRequestChangesMutex.Unlock()
	fake.ListPullRequestChangesStub = nil
	if fake.listPullRequestChangesReturnsOnCall == nil {
		fake.listPullRequestChangesReturnsOnCall = make(map[int]struct {
			result1 []provider.Change
			result2 error
		})
	}
	fake.listPullRequestChangesReturnsOnCall[i] = struct {
		result1 []provider.Change
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) ListPullRequests(arg1 context.Context, arg2 provider.Repository) ([]provider.PullRequest, error) {
	fake.listPullRequestsMutex.Lock()
	ret, specificReturn := fake.listPullRequestsReturnsOnCall[len(fake.listPullRequestsArgsForCall)]
	fake.listPullRequestsArgsForCall = append(fake.listPullRequestsArgsForCall, struct {
		arg1 context.Context
		arg2 provider.Repository
	}{arg1, arg2})
	stub := fake.ListPullRequestsStub
	fakeReturns := fake.listPullRequestsReturns
	fake.recordInvocation("ListPullRequests", []interface{}{arg1, arg2})
	fake.listPullRequestsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProvider) ListPullRequestsCallCount() int {
	fake.listPullRequestsMutex.RLock()
	defer fake.listPullRequestsMutex.RUnlock()
	return len(fake.listPullRequestsArgsForCall)
}

func (fake *FakeProvider) ListPullRequestsCalls(stub func(context.Context, provider.Repository) ([]provider.PullRequest, error)) {
	fake.listPullRequestsMutex.Lock()
	defer fake.listPullRequestsMutex.Unlock()
	fake.ListPullRequestsStub = stub
}

func (fake *FakeProvider) ListPullRequestsArgsForCall(i int) (context.Context, provider.Repository) {
	fake.listPullRequestsMutex.RLock()
	defer fake.listPullRequestsMutex.RUnlock()
	argsForCall := fake.listPullRequestsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProvider) ListPullRequestsReturns(result1 []provider.PullRequest, result2 error) {
	fake.listPullRequestsMutex.Lock()
	defer fake.listPullRequestsMutex.Unlock()
	fake.ListPullRequestsStub = nil
	fake.listPullRequestsReturns = struct {
		result1 []provider.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) ListPullRequestsReturnsOnCall(i int, result1 []provider.PullRequest, result2 error) {
	fake.listPullRequestsMutex.Lock()
	defer fake.listPullRequestsMutex.Unlock()
	fake.ListPullRequestsStub = nil
	if fake.listPullRequestsReturnsOnCall == nil {
		fake.listPullRequestsReturnsOnCall = make(map[int]struct {
			result1 []provider.PullRequest
			result2 error
		})
	}
	fake.listPullRequestsReturnsOnCall[i] = struct {
		result1 []provider.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) SetHostname(arg1 string) error {
	fake.setHostnameMutex.Lock()
	ret, specificReturn := fake.setHostnameReturnsOnCall[len(fake.setHostnameArgsForCall)]
	fake.setHostnameArgsForCall = append(fake.setHostnameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetHostnameStub
	fakeReturns := fake.setHostnameReturns
	fake.recordInvocation("SetHostname", []interface{}{arg1})
	fake.setHostnameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProvider) SetHostnameCallCount() int {
	fake.setHostnameMutex.RLock()
	defer fake.setHostnameMutex.RUnlock()
	return len(fake.setHostnameArgsForCall)
}

func (fake *FakeProvider) SetHostnameCalls(stub func(string) error) {
	fake.setHostnameMutex.Lock()
	defer fake.setHostnameMutex.Unlock()
	fake.SetHostnameStub = stub
}

func (fake *FakeProvider) SetHostnameArgsForCall(i int) string {
	fake.setHostnameMutex.RLock()
	defer fake.setHostnameMutex.RUnlock()
	argsForCall := fake.setHostnameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProvider) SetHostnameReturns(result1 error) {
	fake.setHostnameMutex.Lock()
	defer fake.setHostnameMutex.Unlock()
	fake.SetHostnameStub = nil
	fake.setHostnameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) SetHostnameReturnsOnCall(i int, result1 error) {
	fake.setHostnameMutex.Lock()
	defer fake.setHostnameMutex.Unlock()
	fake.SetHostnameStub = nil
	if fake.setHostnameReturnsOnCall == nil {
		fake.setHostnameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setHostnameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) SetLogger(arg1 logr.Logger) error {
	fake.setLoggerMutex.Lock()
	ret, specificReturn := fake.setLoggerReturnsOnCall[len(fake.setLoggerArgsForCall)]
	fake.setLoggerArgsForCall = append(fake.setLoggerArgsForCall, struct {
		arg1 logr.Logger
	}{arg1})
	stub := fake.SetLoggerStub
	fakeReturns := fake.setLoggerReturns
	fake.recordInvocation("SetLogger", []interface{}{arg1})
	fake.setLoggerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProvider) SetLoggerCallCount() int {
	fake.setLoggerMutex.RLock()
	defer fake.setLoggerMutex.RUnlock()
	return len(fake.setLoggerArgsForCall)
}

func (fake *FakeProvider) SetLoggerCalls(stub func(logr.Logger) error) {
	fake.setLoggerMutex.Lock()
	defer fake.setLoggerMutex.Unlock()
	fake.SetLoggerStub = stub
}

func (fake *FakeProvider) SetLoggerArgsForCall(i int) logr.Logger {
	fake.setLoggerMutex.RLock()
	defer fake.setLoggerMutex.RUnlock()
	argsForCall := fake.setLoggerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProvider) SetLoggerReturns(result1 error) {
	fake.setLoggerMutex.Lock()
	defer fake.setLoggerMutex.Unlock()
	fake.SetLoggerStub = nil
	fake.setLoggerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) SetLoggerReturnsOnCall(i int, result1 error) {
	fake.setLoggerMutex.Lock()
	defer fake.setLoggerMutex.Unlock()
	fake.SetLoggerStub = nil
	if fake.setLoggerReturnsOnCall == nil {
		fake.setLoggerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setLoggerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) SetToken(arg1 string, arg2 string) error {
	fake.setTokenMutex.Lock()
	ret, specificReturn := fake.setTokenReturnsOnCall[len(fake.setTokenArgsForCall)]
	fake.setTokenArgsForCall = append(fake.setTokenArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.SetTokenStub
	fakeReturns := fake.setTokenReturns
	fake.recordInvocation("SetToken", []interface{}{arg1, arg2})
	fake.setTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProvider) SetTokenCallCount() int {
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	return len(fake.setTokenArgsForCall)
}

func (fake *FakeProvider) SetTokenCalls(stub func(string, string) error) {
	fake.setTokenMutex.Lock()
	defer fake.setTokenMutex.Unlock()
	fake.SetTokenStub = stub
}

func (fake *FakeProvider) SetTokenArgsForCall(i int) (string, string) {
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	argsForCall := fake.setTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProvider) SetTokenReturns(result1 error) {
	fake.setTokenMutex.Lock()
	defer fake.setTokenMutex.Unlock()
	fake.SetTokenStub = nil
	fake.setTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) SetTokenReturnsOnCall(i int, result1 error) {
	fake.setTokenMutex.Lock()
	defer fake.setTokenMutex.Unlock()
	fake.SetTokenStub = nil
	if fake.setTokenReturnsOnCall == nil {
		fake.setTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) Setup() error {
	fake.setupMutex.Lock()
	ret, specificReturn := fake.setupReturnsOnCall[len(fake.setupArgsForCall)]
	fake.setupArgsForCall = append(fake.setupArgsForCall, struct {
	}{})
	stub := fake.SetupStub
	fakeReturns := fake.setupReturns
	fake.recordInvocation("Setup", []interface{}{})
	fake.setupMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProvider) SetupCallCount() int {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return len(fake.setupArgsForCall)
}

func (fake *FakeProvider) SetupCalls(stub func() error) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = stub
}

func (fake *FakeProvider) SetupReturns(result1 error) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = nil
	fake.setupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) SetupReturnsOnCall(i int, result1 error) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = nil
	if fake.setupReturnsOnCall == nil {
		fake.setupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) UpdateCommentOfPullRequest(arg1 context.Context, arg2 provider.PullRequest, arg3 int, arg4 []byte) error {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.updateCommentOfPullRequestMutex.Lock()
	ret, specificReturn := fake.updateCommentOfPullRequestReturnsOnCall[len(fake.updateCommentOfPullRequestArgsForCall)]
	fake.updateCommentOfPullRequestArgsForCall = append(fake.updateCommentOfPullRequestArgsForCall, struct {
		arg1 context.Context
		arg2 provider.PullRequest
		arg3 int
		arg4 []byte
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.UpdateCommentOfPullRequestStub
	fakeReturns := fake.updateCommentOfPullRequestReturns
	fake.recordInvocation("UpdateCommentOfPullRequest", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.updateCommentOfPullRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProvider) UpdateCommentOfPullRequestCallCount() int {
	fake.updateCommentOfPullRequestMutex.RLock()
	defer fake.updateCommentOfPullRequestMutex.RUnlock()
	return len(fake.updateCommentOfPullRequestArgsForCall)
}

func (fake *FakeProvider) UpdateCommentOfPullRequestCalls(stub func(context.Context, provider.PullRequest, int, []byte) error) {
	fake.updateCommentOfPullRequestMutex.Lock()
	defer fake.updateCommentOfPullRequestMutex.Unlock()
	fake.UpdateCommentOfPullRequestStub = stub
}

func (fake *FakeProvider) UpdateCommentOfPullRequestArgsForCall(i int) (context.Context, provider.PullRequest, int, []byte) {
	fake.updateCommentOfPullRequestMutex.RLock()
	defer fake.updateCommentOfPullRequestMutex.RUnlock()
	argsForCall := fake.updateCommentOfPullRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeProvider) UpdateCommentOfPullRequestReturns(result1 error) {
	fake.updateCommentOfPullRequestMutex.Lock()
	defer fake.updateCommentOfPullRequestMutex.Unlock()
	fake.UpdateCommentOfPullRequestStub = nil
	fake.updateCommentOfPullRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) UpdateCommentOfPullRequestReturnsOnCall(i int, result1 error) {
	fake.updateCommentOfPullRequestMutex.Lock()
	defer fake.updateCommentOfPullRequestMutex.Unlock()
	fake.UpdateCommentOfPullRequestStub = nil
	if fake.updateCommentOfPullRequestReturnsOnCall == nil {
		fake.updateCommentOfPullRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCommentOfPullRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addCommentToPullRequestMutex.RLock()
	defer fake.addCommentToPullRequestMutex.RUnlock()
	fake.getLastCommentsMutex.RLock()
	defer fake.getLastCommentsMutex.RUnlock()
	fake.listPullRequestChangesMutex.RLock()
	defer fake.listPullRequestChangesMutex.RUnlock()
	fake.listPullRequestsMutex.RLock()
	defer fake.listPullRequestsMutex.RUnlock()
	fake.setHostnameMutex.RLock()
	defer fake.setHostnameMutex.RUnlock()
	fake.setLoggerMutex.RLock()
	defer fake.setLoggerMutex.RUnlock()
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	fake.updateCommentOfPullRequestMutex.RLock()
	defer fake.updateCommentOfPullRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ provider.Provider = new(FakeProvider)
